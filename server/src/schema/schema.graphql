type Board {
  createdAt: DateTime!
  id: ID!
  lists: [List!]!name: String!
  updatedAt: DateTime!
  updatedBy: User
}

input BoardUpdateInput {
  lists: ListUpdateManyInput
  name: String
  updatedBy: UserUpdateOneWithoutBoardsInput
}

input BoardWhereUniqueInput {
  id: ID
}

type Card {
  createdAt: DateTime!
  description: String
  id: ID!
  name: String!
  updatedAt: DateTime!
  updatedBy: User
}

input CardCreateInput {
  description: String
  name: String!
  updatedBy: UserCreateOneInput
}


input CardUpdateInput {
  description: String
  name: String
}

input CardUpdateManyInput {
  connect: [CardWhereUniqueInput!]
  create: [CardCreateInput!]
  disconnect: [CardWhereUniqueInput!]
}

input CardWhereUniqueInput {
  id: ID
}

scalar DateTime

type List {
  cards: [Card!]!
  createdAt: DateTime!
  id: ID!
  name: String!
  updatedAt: DateTime!
  updatedBy: User
}

input ListCreateInput {
  cards: CardCreateManyInput
  name: String!
  updatedBy: UserCreateOneInput
}

input ListScalarWhereInput {
  id_in: [ID!]
}

input ListUpdateInput {
  cards: CardUpdateManyInput
}

input ListUpdateManyInput {
  create: [ListCreateInput!]
  delete: [ListWhereUniqueInput!]
  deleteMany: [ListScalarWhereInput!]
}

input ListWhereInput {
  id: ID
}

input ListWhereUniqueInput {
  id: ID
}

type Mutation {
  createBoard(name: String!): User!
  deleteBoard(id: ID!): Board!
  deleteList(where: ListWhereUniqueInput!): List
  updateBoard(data: BoardUpdateInput!, where: BoardWhereUniqueInput!): Board
  #used in:
  #updateBoard(data: {lists: {create: {name: $name}}}, where: {id: $boardId})
  #mutation deletelistsOfBoard($boardId: ID!, $listIds: [ListWhereUniqueInput!]!) {

  updateCard(data: CardUpdateInput!, where: CardWhereUniqueInput!): Card!
  #used in:
  #updateCard(data: CardUpdateInput!, where: CardWhereUniqueInput!): Card

  updateList(data: ListUpdateInput!, where: ListWhereUniqueInput!): List
  #used in:
  #mutation AddCardMutation( $cardListId: ID! $name: String!
  #mutation moveCard( $cardId: ID! $oldCardListId: ID! $cardListId: ID!

}

type Query {
  board(where: BoardWhereUniqueInput!): Board
  list(where: ListWhereUniqueInput!): List
  me: User
}

type User {
  avatarUrl: String
  boards: [Board]
  email: String!
  id: ID!
  name: String!
}
