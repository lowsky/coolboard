version: 2.1

parameters:
  gh-pr:
    type: string
    default: ""
  test-url:
    type: string
    default: ""
  deployed-sha:
    type: string
    default: ""

# have a filter to disable regular builds.
workflows:
  version: 2
  build:
    jobs:
      - build

jobs:
  check:
    docker:
      - image:  cypress/base:17.3.0
    parallelism: 1
    steps:
      - checkout
      - restore_cache:
          keys:
            - cache-{{ .Branch }}-{{ checksum "yarn.lock" }}
      - run:
          name: web client - yarn
          command: yarn
      - save_cache:
          key: cache-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
            - ~/.npm
            - ~/.cache
#      - run:
#          name: web client - build
#          command: npm run build
  build:
    docker:
      - image: cypress/included:9.2.1
    steps:
      - checkout
      - run:
          name: Use parameters
          command: |
            echo parameters:
            echo gh-pr: "<< pipeline.parameters.gh-pr >>"
            echo test-url: << pipeline.parameters.test-url >>
            echo deployed-sha: <<pipeline.parameters.deployed-sha>>

            echo 'export CIRCLE_PR_NUMBER=<< pipeline.parameters.gh-pr >>' | tee -a $BASH_ENV
            echo 'export CYPRESS_baseUrl=<< pipeline.parameters.test-url >>' | tee -a $BASH_ENV
            echo 'export EXPECTED_GIT_SHA=<< pipeline.parameters.deployed-sha >>' | tee -a $BASH_ENV

      - run:
          name: build parameter diagnosis
          command: |
            env | grep CIRCLE | sort

            echo PR no : $CIRCLE_PR_NUMBER

            if [ -n "$CIRCLE_PR_NUMBER" ]; then
              echo " there is this PR number: $CIRCLE_PR_NUMBER"
            fi

            if [ "X${CIRCLE_PR_NUMBER}${CYPRESS_baseUrl}${EXPECTED_GIT_SHA}" == "X" ]; then
              echo there are parameters. done.
              exit 0
            fi

            env | grep CIRCLE | sort
      - run:
          name: verify fully deployed web site via git-commit
          command: |
            cd smoketest
            CYPRESS_baseUrl=<< pipeline.parameters.test-url >>
            EXPECTED_GIT_SHA=<< pipeline.parameters.deployed-sha >>

            NETLIFY_URL=https://deploy-preview-${CIRCLE_PR_NUMBER}--coolboard.netlify.app
            export CYPRESS_baseUrl=${CYPRESS_baseUrl:-$NETLIFY_URL}

            echo SUT: $CYPRESS_baseUrl
            echo
            echo current CIRCLE_SHA1: $CIRCLE_SHA1
            echo expected EXPECTED_GIT_SHA: $EXPECTED_GIT_SHA
            echo
            echo using GIT_SHA1=${EXPECTED_GIT_SHA:-$CIRCLE_SHA1}
            echo running GIT_SHA1=${EXPECTED_GIT_SHA:-$CIRCLE_SHA1} npm run wait:valid-version
            echo
            GIT_SHA1=${EXPECTED_GIT_SHA:-$CIRCLE_SHA1} npm run wait:valid-version
      - run:
          name: run cypress
          command: |
            echo PR: $CIRCLE_PR_NUMBER
            NETLIFY_URL=https://deploy-preview-${CIRCLE_PR_NUMBER}--coolboard.netlify.app
            CYPRESS_baseUrl=<< pipeline.parameters.test-url >>
            export CYPRESS_baseUrl=${CYPRESS_baseUrl:-$NETLIFY_URL}
            cd smoketest
            mkdir -p cypress/results
            yarn
            CYPRESS_branch=${CIRCLE_BRANCH} yarn cypress run --record --key $CYPRESS_API_KEY --reporter junit --reporter-options mochaFile=cypress/results/test-results.xml,toConsole=true
      - store_test_results:
          path: smoketest/cypress/results
      - store_artifacts:
          path: /root/project/smoketest/cypress/screenshots
          destination: screenshots
      - store_artifacts:
          path: /root/project/smoketest/cypress/videos
          destination: videos

  prebuild_diag:
    docker:
      - image: cypress/included:9.2.1
    steps:
      - checkout
      - run:
          name: Set PR number in env
          command: |
            env | grep CIRCLE | sort
            echo CIRCLE_PULL_REQUEST = $CIRCLE_PULL_REQUEST
            echo CIRCLE_PR_NUMBER = $CIRCLE_PR_NUMBER
            echo 'export CIRCLE_PR_NUMBER="${CIRCLE_PR_NUMBER:-${CIRCLE_PULL_REQUEST##*/}}"' >> $BASH_ENV
      - run:
          name: build diagnosis
          command: |
            env | grep CIRCLE | sort

            echo PR no.: $CIRCLE_PR_NUMBER

            source $BASH_ENV
            echo PR env from BASH_ENV file: $BASH_ENV
            echo PR no.: $CIRCLE_PR_NUMBER
